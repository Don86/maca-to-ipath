attrs_ls
x1[4]
x1[22]
attrs_ls <- xml_attrs(read_xml(x1[22]))
attrs_Ls
attrs_ls
class(attrs_ls)
attrs_ls["fill"]
for (i in 1:nrow(x0.attr.dt)) {
cx <- x0.attr.dt[i, "cx"]
cy <- x0.attr.dt[i, "cy"]
for (j in 1:length(x1)) {
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
if (attrs_ls["cx"] == cx & attrs_ls["cy"] == cy) {
print(paste0(attrs_ls["cx"], "; ", attrs_ls["cy"]))
}
}
}
}
for (i in 1:nrow(x0.attr.dt)) {
cx <- x0.attr.dt[i, "cx"]
cy <- x0.attr.dt[i, "cy"]
for (j in 1:length(x1)) {
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
if (attrs_ls["cx"] == cx & attrs_ls["cy"] == cy) {
print(paste0(attrs_ls["cx"], "; ", attrs_ls["cy"]))
}
}
}
}
x0.attr.dt["cx"=="2244.50" & "cy"=="1654.50"]
x0.attr.dt[cx=="2244.50" & cy=="1654.50"]
d_temp <- x0.attr.dt[cx=="2244.50" & cy=="1654.50"]
d_temp["fill"]
d_temp[fill]
d_temp[,fill]
ellipse_ls
as.vector(unlist(xml_nodeset))
as.vector(unlist(ellipse_lks))
as.vector(unlist(ellipse_ls))
library("httr")
library("XML")
library("methods")
library("rvest")
#library("dplyr")
library("data.table")
# Read off (cx, cy) coords of significant ellipses, i.e. where fill=<red>
x0 <- read_html("ipath_nodes_only.svg")
ellipse_ls <- xml_find_all(x0, '//ellipse')
x0.attr.dt <- as.data.table(t(as.data.table(xml_attrs(ellipse_ls))))
colnames(x0.attr.dt) <- names(xml_attrs(ellipse_ls)[[1]])
x0.attr.dt <- x0.attr.dt[fill=="#ff0000"]
x0.attr.dt
cbind(x0.attr.dt[cx], x0.attr.dt[cx])
cbind(x0.attr.dt[cx], x0.attr.dt[cy])
cbind(x0.attr.dt["cx"], x0.attr.dt["cy"])
cbind(x0.attr.dt[,"cx"], x0.attr.dt[,"cy"])
cbind(as.vector(x0.attr.dt[,"cx"]), as.vector(x0.attr.dt[,"cy"]))
x<-cbind(as.vector(x0.attr.dt[,"cx"]), as.vector(x0.attr.dt[,"cy"]))
class(x)
x<-cbind(as.vector(unlist(x0.attr.dt[,"cx"])), as.vector(unlist(x0.attr.dt[,"cy"])))
class(x)
x
coords_ls <- c()
x0.attr.dt[4,"cx"]
x0.attr.dt[4,"cx"][1]
x0.attr.dt[4,cx]
coords_ls <- c()
for (i in 1:nrow(x0.attr.dt)) {
coords <- cbind(x0.attr.dt[i, cx], x0.attr.dt[i, cy])
coords_ls <- c(coords_ls, coords)
}
coords_ls
coords_ls <- c()
for (i in 1:nrow(x0.attr.dt)) {
coords <- cbind(x0.attr.dt[i, cx], x0.attr.dt[i, cy])
coords_ls <- rbind(coords_ls, coords)
}
coords_Ls
coords_ls
coords_ls <- c()
for (i in 1:nrow(x0.attr.dt)) {
coords <- cbind(x0.attr.dt[i, cx], x0.attr.dt[i, cy])
coords_ls <- rbind(coords_ls, coords)
}
coords_ls
coords_ls <- c()
for (i in 1:nrow(x0.attr.dt)) {
coords_ls <- c(coords_ls, paste0(x0.attr.dt[i, cx], ":" , x0.attr.dt[i, cy]))
}
coords_ls
coords_ls <- c()
for (i in 1:nrow(x0.attr.dt)) {
coords_ls <- rbind(coords_ls, c(x0.attr.dt[i, cx], x0.attr.dt[i, cy]))
}
coords_ls
coords_ls[1]
coords_ls[1,]
coords_ls[2,]
coords_ls[1,]
coords_ls[1,1]
coords_ls[1,2]
c("2244.50", "1654.50") == coords_ls[1,]
for (j in 1:length(x1)) {
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
cx1 <- attrs_ls["cx"]
cy1 <- attrs_ls["cy"]
for (i in 1:nrow(coords_ls)) {
if (cx1 == coords_ls[1,1] and cy1 == coords_ls[1,2]) {
print(paste0(cx1, ", "cy1))
}
}
}
}
for (j in 1:length(x1)) {
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
cx1 <- attrs_ls["cx"]
cy1 <- attrs_ls["cy"]
for (i in 1:nrow(coords_ls)) {
if (cx1 == coords_ls[1,1] and cy1 == coords_ls[1,2]) {
print(paste0(cx1, ", ", cy1))
}
}
}
}
or (j in 1:length(x1)) {
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
cx1 <- attrs_ls["cx"]
cy1 <- attrs_ls["cy"]
for (i in 1:nrow(coords_ls)) {
if (cx1 == coords_ls[1,1] & cy1 == coords_ls[1,2]) {
print(paste0(cx1, ",", cy1))
}
}
}
}
# Modify whole_module.svg
x1 <- scan("ipath_whole_module.svg", what="", sep="\n")
for (j in 1:length(x1)) {
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
cx1 <- attrs_ls["cx"]
cy1 <- attrs_ls["cy"]
for (i in 1:nrow(coords_ls)) {
if (cx1 == coords_ls[1,1] & cy1 == coords_ls[1,2]) {
print(paste0(cx1, ",", cy1))
}
}
}
}
for (j in 1:length(x1)) {
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
cx1 <- attrs_ls["cx"]
cy1 <- attrs_ls["cy"]
for (i in 1:nrow(coords_ls)) {
if (cx1 == coords_ls[i,1] & cy1 == coords_ls[i,2]) {
print(paste0(cx1, ",", cy1))
}
}
}
}
for (j in 1:length(x1)) {
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
for (i in 1:nrow(coords_ls)) {
if (attrs_ls["cx"] == coords_ls[i,1] & attrs_ls["cy"] == coords_ls[i,2]) {
x1[j] <- gsub("#ff0000", "#00ffff", x1[j])
}
}
}
}
# Write out
write(x1, file = "test2.html")
attrs_ls
x1
for (j in 1:length(x1)) {
# Set highlighted path width to 5
if (grepl("path", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
if (attrs_ls["stroke"] == "#ff0000") {
x1[j] <- gsub("stroke-width='20'", "stroke-width='7'", x1[j])
}
}
# Change colour of significant ellipses to blue
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
for (i in 1:nrow(coords_ls)) {
if (attrs_ls["cx"] == coords_ls[i,1] & attrs_ls["cy"] == coords_ls[i,2]) {
x1[j] <- gsub("#ff0000", "#00A1E1", x1[j])
}
}
}
}
# Write out
write(x1, file = "test2.html")
for (j in 1:length(x1)) {
# Set highlighted path width to 5
if (grepl("path", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
if (attrs_ls["stroke"] == "#ff0000") {
x1[j] <- gsub("stroke-width='20'", "stroke-width='7'", x1[j])
}
}
# Change colour of significant ellipses to blue
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
for (i in 1:nrow(coords_ls)) {
if (attrs_ls["cx"] == coords_ls[i,1] & attrs_ls["cy"] == coords_ls[i,2]) {
x1[j] <- gsub("#ff0000", "#00A1E1", x1[j])
}
}
}
}
# Write out
write(x1, file = "test2.html")
for (j in 1:length(x1)) {
# Set highlighted path width to 5
if (grepl("path", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
if (attrs_ls["stroke"] == "#ff0000") {
x1[j] <- gsub("stroke-width='20'", "stroke-width='4'", x1[j])
}
}
# Change colour of significant ellipses to blue
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
for (i in 1:nrow(coords_ls)) {
if (attrs_ls["cx"] == coords_ls[i,1] & attrs_ls["cy"] == coords_ls[i,2]) {
x1[j] <- gsub("#ff0000", "#00A1E1", x1[j])
}
}
}
}
# Write out
write(x1, file = "test2.html")
x1 <- scan("ipath_whole_module.svg", what="", sep="\n")
for (j in 1:length(x1)) {
# Set highlighted path width to 5
if (grepl("path", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
if (attrs_ls["stroke"] == "#ff0000") {
x1[j] <- gsub("stroke-width='20'", "stroke-width='4'", x1[j])
}
}
# Change colour of significant ellipses to blue
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
for (i in 1:nrow(coords_ls)) {
if (attrs_ls["cx"] == coords_ls[i,1] & attrs_ls["cy"] == coords_ls[i,2]) {
x1[j] <- gsub("#ff0000", "#00A1E1", x1[j])
}
}
}
}
# Write out
write(x1, file = "test2.html")
library("httr")
library("XML")
library("methods")
library("rvest")
#library("dplyr")
library("data.table")
# Get (cx, cy) coords of significant ellipses, i.e. where fill=<red>
x0 <- read_html("ipath_nodes_only.svg")
ellipse_ls <- xml_find_all(x0, '//ellipse')
x0.attr.dt <- as.data.table(t(as.data.table(xml_attrs(ellipse_ls))))
colnames(x0.attr.dt) <- names(xml_attrs(ellipse_ls)[[1]])
x0.attr.dt <- x0.attr.dt[fill=="#ff0000"]
coords_ls <- c()
for (i in 1:nrow(x0.attr.dt)) {
coords_ls <- rbind(coords_ls, c(x0.attr.dt[i, cx], x0.attr.dt[i, cy]))
}
# Modify whole_module.svg
x1 <- scan("ipath_whole_module.svg", what="", sep="\n")
for (j in 1:length(x1)) {
# Set highlighted path width to 5
if (grepl("path", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
if (attrs_ls["stroke"] == "#ff0000") {
x1[j] <- gsub("stroke-width='20'", "stroke-width='4'", x1[j])
}
}
# Change colour of significant ellipses to blue
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
for (i in 1:nrow(coords_ls)) {
if (attrs_ls["cx"] == coords_ls[i,1] & attrs_ls["cy"] == coords_ls[i,2]) {
x1[j] <- gsub("#ff0000", "#00A1E1", x1[j])
}
}
}
}
# Modify whole_module.svg
x1 <- scan("ipath_whole_module.svg", what="", sep="\n")
# Write out
write(x1, file = "test2.html")
for (j in 1:length(x1)) {
# Change colour of significant ellipses to blue
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
for (i in 1:nrow(coords_ls)) {
if (attrs_ls["cx"] == coords_ls[i,1] & attrs_ls["cy"] == coords_ls[i,2]) {
x1[j] <- gsub("#ff0000", "#00A1E1", x1[j])
}
}
}
}
for (j in 1:length(x1)) {
if (grepl("path", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
if (attrs_ls["stroke"] == "#ff0000") {
x1[j] <- gsub("stroke-width='20'", "stroke-width='4'", x1[j])
}
}
}
# Set highlighted path width to 5
for (j in 1:length(x1)) {
if (grepl("path", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
if ("stroke" %in% attrs_ls) {
if (attrs_ls["stroke"] == "#ff0000") {
x1[j] <- gsub("stroke-width='20'", "stroke-width='4'", x1[j])
}
}
}
}
for (j in 1:length(x1)) {
if (grepl("path", x1[j]) & grepl("stroke-width='20'", x1[j])) {
x1[j] <- gsub("stroke-width='20'", "stroke-width='4'", x1[j])
}
}
# Write out
write(x1, file = "test2.html")
for (j in 1:length(x1)) {
# Change colour of significant ellipses to blue
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
for (i in 1:nrow(coords_ls)) {
if (attrs_ls["cx"] == coords_ls[i,1] & attrs_ls["cy"] == coords_ls[i,2]) {
x1[j] <- gsub("#ff0000", "#00A1E1", x1[j])
}
}
}
}
# Set highlighted path width to 7, and red ellipse radius to 5
highlight_path_width <- 7
module_ellipse_radius <- 5
for (j in 1:length(x1)) {
if (grepl("path", x1[j]) & grepl("stroke-width='20'", x1[j])) {
x1[j] <- gsub("stroke-width='20'", paste0("stroke-width='", highlight_path_width, "'"), x1[j])
}
if (grepl("ellipse", x1[j]) & grepl('fill="#ff0000"', x1[j])) {
x1[j] <- gsub("stroke-width='20'", paste0("stroke-width='", highlight_path_width, "'"), x1[j])
}
}
# Write out
write(x1, file = "test2.html")
# Set highlighted path width to 7, and red ellipse radius to 5
highlight_path_width <- 7
module_ellipse_radius <- 5
for (j in 1:length(x1)) {
if (grepl("path", x1[j]) & grepl("stroke-width='20'", x1[j])) {
x1[j] <- gsub("stroke-width='20'", paste0("stroke-width='", highlight_path_width, "'"), x1[j])
}
if (grepl("ellipse", x1[j]) & grepl('fill="#ff0000"', x1[j])) {
x1[j] <- gsub("rx='20'", paste0("rx='", module_ellipse_radius, "'"), x1[j])
x1[j] <- gsub("ry='20'", paste0("ry='", module_ellipse_radius, "'"), x1[j])
}
}
# Write out
write(x1, file = "test2.html")
library("httr")
library("XML")
library("methods")
library("rvest")
#library("dplyr")
library("data.table")
# Get (cx, cy) coords of significant ellipses, i.e. where fill=<red>
x0 <- read_html("ipath_nodes_only.svg")
ellipse_ls <- xml_find_all(x0, '//ellipse')
x0.attr.dt <- as.data.table(t(as.data.table(xml_attrs(ellipse_ls))))
colnames(x0.attr.dt) <- names(xml_attrs(ellipse_ls)[[1]])
x0.attr.dt <- x0.attr.dt[fill=="#ff0000"]
coords_ls <- c()
for (i in 1:nrow(x0.attr.dt)) {
coords_ls <- rbind(coords_ls, c(x0.attr.dt[i, cx], x0.attr.dt[i, cy]))
}
# Modify whole_module.svg
x1 <- scan("ipath_whole_module.svg", what="", sep="\n")
for (j in 1:length(x1)) {
# Change colour of significant ellipses to blue
if (grepl("ellipse", x1[j])) {
attrs_ls <- xml_attrs(read_xml(x1[j]))
for (i in 1:nrow(coords_ls)) {
if (attrs_ls["cx"] == coords_ls[i,1] & attrs_ls["cy"] == coords_ls[i,2]) {
x1[j] <- gsub("#ff0000", "#00A1E1", x1[j])
}
}
}
}
# Set highlighted path width to 7, and red ellipse radius to 5
highlight_path_width <- 7
module_ellipse_radius <- 5
for (j in 1:length(x1)) {
if (grepl("path", x1[j]) & grepl("stroke-width='20'", x1[j])) {
x1[j] <- gsub("stroke-width='20'", paste0("stroke-width='", highlight_path_width, "'"), x1[j])
}
if (grepl("ellipse", x1[j]) & grepl('fill="#ff0000"', x1[j])) {
x1[j] <- gsub("rx='20'", paste0("rx='", module_ellipse_radius, "'"), x1[j])
x1[j] <- gsub("ry='20'", paste0("ry='", module_ellipse_radius, "'"), x1[j])
}
}
# Write out
write(x1, file = "test2.html")
# Set highlighted path width to 7, and red ellipse radius to 5
highlight_path_width <- 7
module_ellipse_radius <- 5
for (j in 1:length(x1)) {
if (grepl("path", x1[j]) & grepl("stroke-width='20'", x1[j])) {
x1[j] <- gsub("stroke-width='20'", paste0("stroke-width='", highlight_path_width, "'"), x1[j])
}
if (grepl("ellipse", x1[j]) & grepl("fill='#ff0000'", x1[j])) {
x1[j] <- gsub("rx='20'", paste0("rx='", module_ellipse_radius, "'"), x1[j])
x1[j] <- gsub("ry='20'", paste0("ry='", module_ellipse_radius, "'"), x1[j])
}
}
# Write out
write(x1, file = "test2.html")
library("MetaboAnalystR")
library("KEGGREST")
library("tidyverse")
library("httr")
library("RColorBrewer")
library("XML")
library("methods")
library("rvest")
library("data.table")
source("/Users/don/Documents/bin/sprida-src.R")
setwd("/Users/don/Documents/pathway-mapping/maca-to-ipath/")
fn_in <- ("drossie_minus_pbqc.csv")
kegg_species_id <- "dme"
# Get KEGG name-to-map.id tibble
kl.dt <- as.data.table(keggList("pathway", kegg_species_id), keep.rownames = T)
kl.dt[, 2] <- as.vector(unlist(kl.dt[ , lapply(V2, function(x) strsplit(x, " - ")[[1]][1])]))
kl.dt[, 1] <- as.vector(unlist(kl.dt[ , lapply(V1, function(x) gsub("path:", "", x))]))
colnames(kl.dt) <- c("pw_id", "pw_name")
#  ==================== ma.ca PW analysis - from run summary with 2 groups ====================
mSet<-InitDataObjects("conc", "pathqea", FALSE)
mSet<-Read.TextData(mSet, fn_in, "rowu", "disc");
mSet<-CrossReferencing(mSet, "name");
mSet<-CreateMappingResultTable(mSet)
mSet<-SanityCheckData(mSet)
mSet<-ReplaceMin(mSet);
mSet<-PreparePrenormData(mSet)
mSet<-Normalization(mSet, "NULL", "LogNorm", "NULL", ratio=FALSE, ratioNum=20)
#mSet<-PlotNormSummary(mSet, "norm_0_", "png", 72, width=NA)
#mSet<-PlotSampleNormSummary(mSet, "snorm_0_", "png", 72, width=NA)
mSet<-SetKEGG.PathLib(mSet, kegg_species_id)
mSet<-SetMetabolomeFilter(mSet, F);
mSet<-CalculateQeaScore(mSet, "rbc", "gt")
# filter out FDR < 0.01
my_fdr <- 0.01
tbl.out <- as_tibble(mSet$analSet$qea.mat, rownames="map")
tbl.out2 <- tbl.out %>% filter(FDR < my_fdr)
significant.pws <- as.vector(unlist(tbl.out2[, "map"]))
# Get the significant pathways
# But not all pw names can be found in KEGG
available.pws.in.kegg <- c()
for (pw in significant.pws) {
d_t <- kl.dt %>% filter(pw_name==pw)
if (nrow(d_t)==0) {
print(paste0(pw, " not found in KEGG!"))
} else {
available.pws.in.kegg <- c(available.pws.in.kegg, pw)
}
}
significant.pw.ids <- c()
significant.metabs <- c()
for (pw in significant.pws) {
pw_id <- kl.dt[pw_name==pw, pw_id]
significant.pw.ids <- c(significant.pw.ids, pw_id)
x <- as.vector(unlist(mSet$analSet$qea.hits[pw_id]))
significant.metabs <- c(significant.metabs, x)
}
# drop duplicates
significant.metabs <- unique(significant.metabs)
print(paste0(length(significant.pws), " significant PWs found at FDR < 0.01"))
print(paste0(length(significant.metabs), " significant unique metabolites found"))
selection.str <- ""
for (x in significant.metabs) {
selection.str <- paste0(selection.str, paste0(x, " W20 #ff0000"), "\n")
}
selection.str
significant.pw.ids
significant.pw
significant.pws
mSet
mSet$analSet
mSet$analSet$qea.hits
mSet$analSet$qea.hits[significant.pw.ids]
# get dict of significant pws
significant.pw.dict <- mSet$analSet$qea.hits[significant.pw.ids]
significant.pw.dict
test.pw.id <- "dme00970"
selection.str <- as.vector(unlist(significant.pw.dict[test.pw.id]))
selection.str
